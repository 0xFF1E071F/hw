** TODO [#B] case 0xa3://MOV rAX Ovqp Move EAX to (seg:offset)
#+BEGIN_SRC javascript
                case 0xa3://MOV rAX Ovqp Move EAX to (seg:offset)
                    mem8_loc = segmented_mem8_loc_for_MOV();
                    st32_mem8_write(regs[0]);
                    break EXEC_LOOP;
#+END_SRC



#+BEGIN_SRC c
    case 0xa0: /* mov EAX, Ov */
    case 0xa1:
    case 0xa2: /* mov Ov, EAX */
    case 0xa3:
        {
            target_ulong offset_addr;

            ot = mo_b_d(b, dflag);
            switch (s->aflag) {
#ifdef TARGET_X86_64
            case MO_64:
                offset_addr = cpu_ldq_code(env, s->pc);
                s->pc += 8;
                break;
#endif
            default:
                offset_addr = insn_get(env, s, s->aflag);
                break;
            }
            tcg_gen_movi_tl(tcg_ctx, cpu_A0, offset_addr);
            gen_add_A0_ds_seg(s);
            if ((b & 2) == 0) {
                gen_op_ld_v(s, ot, *cpu_T[0], cpu_A0);
                gen_op_mov_reg_v(tcg_ctx, ot, R_EAX, *cpu_T[0]);
            } else {
                gen_op_mov_v_reg(tcg_ctx, ot, *cpu_T[0], R_EAX);
                gen_op_st_v(s, ot, *cpu_T[0], cpu_A0);
            }
        }
        break;
#+END_SRC

* decode MOV MOVE : Vol. 2B 4-35

A3 MOV moffs16*,AX TD Valid Valid Move AX to (seg:offset).
A3 MOV moffs32*,EAX TD Valid Valid Move EAX to (seg:offset).
REX.W + A3 MOV moffs64*,RAX TD Valid N.E. Move RAX to (offset).

Operand Encoding:
TD op1:Moffs(w) op2:AL/AX/EAX/RAX NA NA


* nasm

MOV		mem_offs,reg_ax			[i-:	o16 a3 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_eax		[i-:	o32 a3 iwdq]				386,SM,NOHLE
MOV		mem_offs,reg_rax		[i-:	o64 a3 iwdq]				X64,SM,NOHLE

* asm


* rtl
# todo 16 bit mode

t0.l = regs[0].l
mem.l[tlb(seg(IP.l++))] = t0.l


